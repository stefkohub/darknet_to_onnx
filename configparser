defmodule DarknetToOnnx.ParseDarknet do
  @moduledoc """
  The Darknet parser (from: https://github.com/jkjung-avt/tensorrt_demos/blob/master/yolo/yolo_to_onnx.py)
  """

  use Agent

  @doc """
        Initializes a DarkNetParser object.
        Keyword argument:
        supported_layers -- a string list of supported layers in DarkNet naming convention,
        parameters are only added to the class dictionary if a parsed layer is included.
  """
  def start_link(opts, args \\ [
      'net',
      'convolutional',
      'maxpool',
      'shortcut',
      'route',
      'upsample',
      'yolo'
  ]) do
    cfg_file_path = Keyword.fetch!(opts, :cfg_file_path)
    Agent.start_link(fn -> parse_cfg_file(cfg_file_path, %{supported_layers: args, layer_counter: 0, layer_configs: []}) end, name: __MODULE__)
  end


  @doc """
    Takes the yolov?.cfg file and parses it layer by layer,
        appending each layer's parameters as a dictionary to layer_configs.
        Keyword argument:
        cfg_file_path
  """
  @doc """
    Takes in a string and segments it by looking for DarkNet delimiters.
        Returns the layer parameters and the remaining string after the last delimiter.
        Example for the first Conv layer in yolo.cfg ...
        [convolutional]
        batch_normalize=1
        filters=32
        size=3
        stride=1
        pad=1
        activation=leaky
        ... becomes the following layer_dict return value:
        {'activation': 'leaky', 'stride': 1, 'pad': 1, 'filters': 32,
        'batch_normalize': 1, 'type': 'convolutional', 'size': 3}.
        '001_convolutional' is returned as layer_name, and all lines that follow in yolo.cfg
        are returned as the next remainder.
        Keyword argument:
        remainder -- a string with all raw text after the previously parsed layer
  """
  def parse_cfg_file(cfg_file_path, state) do
    {:ok, parse_result} = ConfigParser.parse_file(cfg_file_path)
    parse_result
  end

  def is_pan_arch(parsed_cfg) when "yolo" and "upsample" in ConfigParser.sections(parsed_cfg) do
    ConfigParser.sections(parsed_cfg)
  end
end
